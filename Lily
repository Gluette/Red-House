Developer Log of Lily
Half done before thinking about writing a log:D

[10/05/2022]
Complete:
· Random footsteps sounds of player
    public playercontroller player;
    public AudioSource audio1;
    public AudioClip[] stepSound;

    void Start()
    {
        StartCoroutine(PlaySound()); 
    }
        IEnumerator PlaySound()
        {

            while (true)
            {
                if (player.isGround && player.speed > 0.3f && ((player.rb.velocity.x) != 0))
                {
                    AudioClip acp = stepSound[Random.Range(0, stepSound.Length)];
                    audio1.PlayOneShot(acp);
                    yield return new WaitForSeconds(acp.length);
                }
                else
                {
                    yield return null;
                }
            }
        }      
    
· Build the preliminary framework of the Chapter 2

[12/05/2022] 
Compelete：
· Add Post-processing effects

· Stairs moving up and down
    private Rigidbody2D rb;
    public Transform top, bottom;
    public float Speed;
    private float TopY, BottomY;
    private bool isUp = true;
    public void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        TopY = top.position.y;
        BottomY = bottom.position.y;
        Destroy(top.gameObject);
        Destroy(bottom.gameObject);
    }
    void Update()
    {
        Movement();
    }
    void Movement()
    {
        if (isUp)
        {
            rb.velocity = new Vector2(rb.velocity.x, Speed);
            if (transform.position.y > TopY)
            {
                isUp = false;
            }
        }
        else
        {
            rb.velocity = new Vector2(rb.velocity.x, -Speed);
            if (transform.position.y < BottomY)
            {
                isUp = true;
            }
        }
    }

· When player gets 3 gravitations and reach the rooftop, 3 big hourhand will fall
  private void Update()
    {
        gravitations = FindObjectOfType<playercontroller>().gravitations;
    }
    public void OnTriggerEnter2D(Collider2D collision)
    {
        if (player.gravitations > 2)
        {
            GetComponent<Rigidbody2D>().bodyType = RigidbodyType2D.Dynamic;
        }
    }

[13/05/2022] 
Compelete：
· Build the preliminary framework of the Chapter Mirror
· Use Spring Joint 2D to create Elastic platforms

[16/05/2022] 
Compelete：
· Player Dash
 public class playercontroller : MonoBehaviour
{
  void Movement()
    {
        float horizontalmove = Input.GetAxisRaw("Horizontal"); ;
      
        if(horizontalmove != 0)
        {
            transform.localScale = new Vector3(horizontalmove, 1, 1);
            direction = horizontalmove;
        }
        if (Input.GetButton("C") && Cherry > 0)
        {
            isDash = true;
            resumeTime = Time.time + dashTime;
            rb.velocity = new Vector2(direction * dashForce, 0);
            rb.gravityScale = 0;
            anim.SetTrigger("dashing");
        }
        if (!isDash)
        {
            rb.velocity = new Vector2(horizontalmove * speed, rb.velocity.y);
            rb.angularVelocity = -rb.velocity.x / 0.5f * Mathf.Rad2Deg;
        }
        if (Time.time > resumeTime)
        {
            isDash = false;
            rb.gravityScale = 3;
        }
    }
}
Problems:
· Dash time is infinite
· Dash directions only right and left


[17/05/2022] 
Compelete：
· Enemy shoot arrows
public class Enemy : MonoBehaviour
{
    void Attack()
    {
        Anim.Play("EnemyAttack");
    }

    public void CreateArrow()
    {
        GameObject obj = Instantiate(Resources.Load("Arrow")) as GameObject;
        obj.transform.position = AttackCheck.position;
        obj.AddComponent<Arrow>();
    }
}    
 ·  player press the X key to reverse the arrow direction
 public class playercontroller : MonoBehaviour
{
    public void UpdateAttack()
    {    
        if (Input.GetKeyDown(KeyCode.X))
        {
            anim.Play("attackC");
            isAttack = true;
            Invoke("AttackEnd", 0.333f);
        }
    }
    public void AttackEnd()
    {
        isAttack = false;
    }
    public void CheckAttackBox()
    {
        float width = 2;
        float height = 2;
        Vector2 pos1 = AttackCheck.position + AttackCheck.right * width * 0.5f + AttackCheck.up * height * 0.5f;
        Vector2 pos2 = AttackCheck.position - AttackCheck.right * width * 0.5f + AttackCheck.up * height * 0.5f;
        Vector2 pos3 = AttackCheck.position + AttackCheck.right * width * 0.5f - AttackCheck.up * height * 0.5f;
        Vector2 pos4 = AttackCheck.position - AttackCheck.right * width * 0.5f - AttackCheck.up * height * 0.5f;
        Debug.DrawLine(pos1, pos2, Color.red, 0.25f);
        Debug.DrawLine(pos2, pos4, Color.red, 0.25f);
        Debug.DrawLine(pos3, pos4, Color.red, 0.25f);
        Debug.DrawLine(pos3, pos1, Color.red, 0.25f);


        Collider2D col = Physics2D.OverlapBox(AttackCheck.position, new Vector2(width, height), 0,LayerMask.GetMask("Arrow"));
        if (col != null)
        {
            col.GetComponent<Arrow>().Flip();
        }
    }
}

   · When arrow attacks the player or enemies, they die
  

 
